{"version":3,"sources":["Components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Fragment","className","App","state","randomNumber","gameLevel","numberOfGuesses","highScores","standard","expert","userInput","hideInputField","userMessage","highScoreMessage","generateStandardNumber","Math","floor","random","_this","setState","generateExpertNumber","onChangeUserInput","event","Number","target","value","compareValues","_this$state","status","highscoreArray","push","minHighScore","min","apply","Object","toConsumableArray","concat","resetGame","Header_Header","onClick","this","type","name","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f1e8d20.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <>\n        <div className=\"background-image\"></div>\n\n        <div className=\"header\">\n            <h1 className='header-h1'>Start Game!</h1>\n            <h2>Choose Level!</h2> \n        </div>\n        </>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport \"./SCSS/App.scss\";\n\nclass App extends React.Component {\n  state = {\n    randomNumber: null,\n    gameLevel: \"\",\n    numberOfGuesses: 1,\n    highScores: {\n      standard: [],\n      expert: []\n    },\n    userInput: null,\n    hideInputField: false,\n    userMessage: \"\",\n    highScoreMessage: \"\"\n  };\n\n  generateStandardNumber = () => {\n    const randomNumber = Math.floor(Math.random() * 10) + 1;\n    this.setState({\n      randomNumber: randomNumber,\n      gameLevel: \"standard\",\n      hideInputField: true,\n      userMessage: \"\",\n      highScoreMessage: \"\",\n      numberOfGuesses: 1\n    });\n  };\n\n  generateExpertNumber = () => {\n    const randomNumber = Math.floor(Math.random() * 100) + 1;\n    this.setState({\n      randomNumber: randomNumber,\n      gameLevel: \"expert\",\n      hideInputField: true,\n      userMessage: \"\",\n      highScoreMessage: \"\",\n      numberOfGuesses: 1\n    });\n  };\n\n  onChangeUserInput = event => {\n    this.setState({\n      userInput: Number(event.target.value)\n    });\n  };\n\n  compareValues = () => {\n    const { userInput, randomNumber, numberOfGuesses, highScores, gameLevel } = this.state;\n    const status = userInput > randomNumber ? \"Lower\" : \"Higher\";\n    const highscoreArray = highScores[gameLevel];\n    if (userInput === randomNumber) {\n      highscoreArray.push(numberOfGuesses);\n      const minHighScore = Math.min(...highscoreArray);\n      this.setState({\n        hideInputField: false,\n        userMessage: `You Guessed It! Out of ${numberOfGuesses} Tries!`,\n        highScoreMessage: `Your High Score Is ${minHighScore}`\n      });\n    } else {\n      this.setState({\n        numberOfGuesses: this.state.numberOfGuesses + 1,\n        userMessage: `You Need To Go ${status}`\n      });\n    }\n  };\n\n  resetGame = () => {\n    this.setState({\n      randomNumber: null,\n      gameLevel: \"\",\n      numberOfGuesses: 1,\n      highScores: {\n        standard: [],\n        expert: []\n      },\n      userInput: null,\n      hideInputField: false,\n      userMessage: \"\",\n      highScoreMessage: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <Header />\n        </div>\n        <div className=\"buttons-container\">\n          <button onClick={this.generateStandardNumber}>Standard</button>\n          <button onClick={this.generateExpertNumber}>Expert</button>\n        </div>\n        <form className=\"submission\">\n          {this.state.hideInputField === true && ( // if hideInputField is true then the inputs will appear\n            <>\n              <input\n                className=\"enter-text\"\n                type=\"text\"\n                name=\"randomNumber\"\n                placeholder=\"Enter a Number!\"\n                onChange={this.onChangeUserInput}\n              />\n              <input\n                className=\"submit-button\"\n                type=\"button\"\n                value=\"Submit\"\n                onClick={this.compareValues}\n              />\n            </>\n          )}\n        </form>\n        <p className=\"higherLowerMessage\">{this.state.userMessage}</p>\n        <p className=\"highScoreMessage\">{this.state.highScoreMessage}</p>\n        <button className=\"restart-button\" onClick={this.resetGame}>Restart</button>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}